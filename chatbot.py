import re
import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer
import tensorflow as tf
import psycopg2

# Initialize NLTK and download the VADER lexicon
nltk.download('vader_lexicon')

# Load the pre-trained TensorFlow model for intent classification
# Replace 'path_to_model' with the actual path to your trained model
model = tf.keras.models.load_model('path_to_model')

# Instantiate the VADER sentiment intensity analyzer
analyzer = SentimentIntensityAnalyzer()

# Establish connection to the PostgreSQL database
try:
    conn = psycopg2.connect(
        dbname="postgres",
        user="postgres",
        password="adi",
        host="localhost",
        port="5432"
    )
except psycopg2.Error as e:
    print("Error connecting to the database:", e)

def extract_cwe_id(user_input):
    """
    Extracts CWE ID from user input using regex.

    Args:
        user_input (str): User input containing CWE ID.

    Returns:
        str: CWE ID if found, otherwise None.
    """
    match = re.search(r'CWE-\d+', user_input)
    if match:
        return match.group(0)
    return None

def get_vulnerability_details(cwe_id, detail_type=None):
    """
    Retrieves vulnerability details from the database based on CWE ID.

    Args:
        cwe_id (str): CWE ID to search for.
        detail_type (str): Specific detail type to retrieve (e.g., 'mitigations').

    Returns:
        dict: Formatted vulnerability details if found, otherwise a message indicating no details found.
    """
    try:
        cur = conn.cursor()
        query = "SELECT name, description, detection_methods, potential_mitigations FROM vulnerabilities WHERE cwe = %s"
        cur.execute(query, (cwe_id,))
        row = cur.fetchone()

        if row:
            name, description, detection_methods, potential_mitigations = row
            response = {
                "Name": name,
                "Description": description,
                "Detection Methods": detection_methods,
                "Potential Mitigations": potential_mitigations
            }
            if detail_type:
                return {detail_type: response.get(detail_type.replace(" ", "_"))}
            return response
        else:
            return {"error": "No details found for this CWE ID."}
    except psycopg2.Error as e:
        print("Error retrieving data from the database:", e)
        return {"error": "An error occurred while retrieving data."}
    finally:
        if 'cur' in locals():
            cur.close()

def extract_detail_type(user_input):
    """
    Extracts the detail type from the user input.

    Args:
        user_input (str): User input.

    Returns:
        str: Detail type if found, otherwise None.
    """
    detail_types = ['description', 'detection methods', 'potential mitigations']
    for detail_type in detail_types:
        if detail_type in user_input.lower():
            return detail_type.replace(" ", "_").capitalize()
    return None

def predict_intent(user_input):
    """
    Predicts the intent of the user input using a pre-trained TensorFlow model.

    Args:
        user_input (str): User input.

    Returns:
        str: Predicted intent.
    """
    # Implement preprocessing for the model
    # Example: tokenization, padding, encoding, etc.
    # Replace this with your actual preprocessing and prediction code
    # processed_input = preprocess_input(user_input)
    # prediction = model.predict(processed_input)
    prediction = 'query_vulnerability'  # Placeholder
    return prediction

def get_sentiment_label(sentiment_scores):
    """
    Determines the sentiment label based on sentiment scores.

    Args:
        sentiment_scores (dict): Dictionary containing sentiment scores.

    Returns:
        str: Sentiment label ('positive', 'negative', or 'neutral').
    """
    compound_score = sentiment_scores['compound']
    if compound_score >= 0.05:
        return 'positive'
    elif compound_score <= -0.05:
        return 'negative'
    else:
        return 'neutral'

def chatbot_response(user_input):
    """
    Generates a response based on user input.

    Args:
        user_input (str): User input.

    Returns:
        str: Response generated by the chatbot.
    """
    try:
        # Handle common greetings
        if user_input.lower() in ['hello', 'hi']:
            return "Hello! How can I assist you today?"

        # Placeholder for custom greetings
        if user_input.lower() == 'my name is adveith':
            return "Hello Adveith! How can I assist you today?"

        # Placeholder for custom response
        if user_input.lower() == 'lavdya':
            return "tera baap lavdya"

        # Intent classification using TensorFlow model
        intent = predict_intent(user_input)

        # Sentiment analysis using NLTK's VADER module
        sentiment_scores = analyzer.polarity_scores(user_input)
        sentiment_label = get_sentiment_label(sentiment_scores)

        # Respond based on detected intent and sentiment
        if intent == 'query_vulnerability':
            cwe_id = extract_cwe_id(user_input)
            if cwe_id:
                detail_type = extract_detail_type(user_input)
                details = get_vulnerability_details(cwe_id, detail_type)
                if "error" in details:
                    return details["error"]
                else:
                    if detail_type:
                        return f"{detail_type.capitalize()}: {details.get(detail_type)}"
                    else:
                        response = (
                            f"Name: {details['Name']}\n"
                            f"Description: {details['Description']}\n"
                            f"Detection Methods: {details['Detection Methods']}\n"
                            f"Potential Mitigations: {details['Potential Mitigations']}"
                        )
                        return response
            else:
                return "No CWE ID found in the input. Can you please enter another CWE ID?"

        # Add more conditional statements for other intents

        # Default response
        return "I'm sorry, I didn't understand that. Can you please rephrase?"

    except Exception as e:
        return f"An error occurred: {str(e)}"

if __name__ == '__main__':
    # Example usage
    while True:
        user_input = input("You: ")
        print("Bot:", chatbot_response(user_input))
